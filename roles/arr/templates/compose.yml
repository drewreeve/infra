services:
  gluetun:
    image: qmcgaw/gluetun:latest
    container_name: gluetun
    networks:
      gluetun:
      proxy:
    restart: "unless-stopped"
    cap_add:
      - "net_admin"
    security_opt:
      - no-new-privileges:true
    devices:
      - "/dev/net/tun:/dev/net/tun"
    ports:
      - 8888:8888/tcp # HTTP proxy
      - 8388:8388/tcp # Shadowsocks
      - 8388:8388/udp # Shadowsocks
    env_file: .env
    labels:
      traefik.enable: "true"
      traefik.docker.network: "proxy"
      # qbittorrent
      traefik.http.services.qbittorrent.loadbalancer.server.port: "8080"
      traefik.http.routers.qbittorrent.rule: "Host(`qbittorrent.{{ domain }}`)"
      traefik.http.routers.qbittorrent.service: "qbittorrent"
      # sonarr
      traefik.http.services.sonarr.loadbalancer.server.port: "8989"
      traefik.http.routers.sonarr.rule: "Host(`sonarr.{{ domain }}`) || Host(`sonarr.{{ inventory_hostname }}.{{ domain }}`)"
      traefik.http.routers.sonarr.service: "sonarr"
      # prowlarr
      traefik.http.services.prowlarr.loadbalancer.server.port: "9696"
      traefik.http.routers.prowlarr.rule: "Host(`prowlarr.{{ domain }}`) || Host(`prowlarr.{{ inventory_hostname }}.{{ domain }}`)"
      traefik.http.routers.prowlarr.service: "prowlarr"
      # radarr
      traefik.http.services.radarr.loadbalancer.server.port: "7878"
      traefik.http.routers.radarr.rule: "Host(`radarr.{{ domain }}`) || Host(`radarr.{{ inventory_hostname }}.{{ domain }}`)"
      traefik.http.routers.radarr.service: "radarr"

  qbittorrent:
    depends_on:
      gluetun:
        condition: service_healthy
        restart: true
    image: linuxserver/qbittorrent:latest
    restart: unless-stopped
    network_mode: "container:gluetun"
    security_opt:
      - no-new-privileges:true
    environment:
      PUID: "1000"
      PGID: "1000"
      TZ: "Europe/London"
      WEBUI_PORT: "8080"
    volumes:
      - "qbittorrent_config:/config"
      - "qbittorrent_downloads:/downloads"
    healthcheck:
      test: ["CMD", "curl", "--fail", "google.com"]
      interval: 60s
      start_period: 30s
      timeout: 10s
      retries: 3


  prowlarr:
    depends_on:
      gluetun:
        condition: service_healthy
        restart: true
    image: linuxserver/prowlarr:latest
    network_mode: "container:gluetun"
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    volumes:
      - prowlarr_config:/config


  sonarr:
    depends_on:
      gluetun:
        condition: service_healthy
        restart: true
    image: linuxserver/sonarr:latest
    network_mode: "container:gluetun"
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      PUID: "1000"
      PGID: "1000"
    volumes:
      - sonarr_config:/config
      - qbittorrent_downloads:/downloads
      - sonarr_media:/tv


  radarr:
    depends_on:
      gluetun:
        condition: service_healthy
        restart: true
    image: linuxserver/radarr:latest
    network_mode: "container:gluetun"
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    environment:
      PUID: "1000"
      PGID: "1000"
    volumes:
      - radarr_config:/config
      - qbittorrent_downloads:/downloads
      - radarr_media:/movies


  flaresolverr:
      depends_on:
        gluetun:
          condition: service_healthy
          restart: true
      image: flaresolverr/flaresolverr:latest
      container_name: flaresolverr
      network_mode: "container:gluetun"
      security_opt:
        - no-new-privileges:true
      restart: unless-stopped

networks:
  gluetun:
  proxy:
    external: true


volumes:
  prowlarr_config:
    name: prowlarr_config
  qbittorrent_config:
    name: qbittorrent_config
  qbittorrent_downloads:
    name: qbittorrent_downloads
    driver_opts:
      type: nfs
      o: "addr=argon,nfsvers=4,async"
      device: ":/volume1/downloads"
  radarr_config:
    name: radarr_config
  radarr_media:
    name: radarr_media
    driver_opts:
      type: cifs
      o: "addr=argon,username={{ shares.media.user }},password={{ shares.media.password }},vers=3.0,uid=1000,gid=1000"
      device: "//argon/video/Movies"
  sonarr_config:
    name: sonarr_config
  sonarr_media:
    name: sonarr_media
    driver_opts:
      type: cifs
      o: "addr=argon,username={{ shares.media.user }},password={{ shares.media.password }},vers=3.0,uid=1000,gid=1000"
      device: "//argon/video/TV"
